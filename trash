<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>GitHub File Manager</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f7f7f7;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background-color: #ffffff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    h1 {
      text-align: center;
      color: #333;
      font-size: 24px;
    }
    #fileInput {
      display: none;
    }
    .upload-btn {
      display: block;
      width: 100%;
      padding: 12px;
      text-align: center;
      background-color: #28a745;
      color: white;
      font-size: 16px;
      border: none;
      cursor: pointer;
      border-radius: 4px;
      margin-bottom: 20px;
    }
    .upload-btn:hover {
      background-color: #218838;
    }
    .file-list {
      margin-top: 30px;
    }
    .file-item {
      padding: 12px;
      margin-bottom: 12px;
      background-color: #f1f1f1;
      border-radius: 4px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .file-item a {
      color: #007bff;
      text-decoration: none;
      font-size: 14px;
    }
    .file-item a:hover {
      text-decoration: underline;
    }
    .upload-status {
      text-align: center;
      margin-top: 20px;
      font-size: 16px;
      color: #555;
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      h1 {
        font-size: 20px;
      }
      .upload-btn {
        padding: 10px;
        font-size: 14px;
      }
      .file-item {
        padding: 10px;
        font-size: 12px;
      }
    }

    @media (max-width: 480px) {
      .container {
        padding: 10px;
      }
      h1 {
        font-size: 18px;
      }
      .upload-btn {
        padding: 8px;
        font-size: 12px;
      }
      .file-item {
        padding: 8px;
        font-size: 12px;
      }
    }

  </style>
</head>
<body>

  <div class="container">
    <h1>GitHub File Manager</h1>
    <input type="file" id="fileInput" accept="*/*">
    <button class="upload-btn" onclick="document.getElementById('fileInput').click();">Select File</button>
    <div id="uploadStatus" class="upload-status">No file selected yet.</div>
    <div id="fileList" class="file-list">
      <!-- Uploaded files will appear here -->
    </div>
  </div>

  <script>
    // Replace with your GitHub repository details
    const USERNAME = "Siddhu2708"; // GitHub Username
    const REPO = "WebServer"; // GitHub Repository Name
    const BRANCH = "main"; // GitHub Branch (e.g., "main" or "master")
    const TOKEN = "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"; // GitHub Personal Access Token (PAT)
    const API_URL = `https://api.github.com/repos/${USERNAME}/${REPO}/contents`;

    // Fetch and display the list of uploaded files
    async function fetchFileList() {
      const res = await fetch(`${API_URL}?ref=${BRANCH}`, {
        headers: { Authorization: `token ${TOKEN}` }
      });

      if (res.ok) {
        const files = await res.json();
        const fileListDiv = document.getElementById("fileList");
        fileListDiv.innerHTML = ""; // Clear the list before updating

        files.forEach(file => {
          const fileItem = document.createElement("div");
          fileItem.classList.add("file-item");

          const fileName = document.createElement("span");
          fileName.textContent = `File: ${file.name} (Size: ${(file.size / 1024).toFixed(2)} KB)`;

          const downloadLink = document.createElement("a");
          downloadLink.href = file.download_url;
          downloadLink.target = "_blank";
          downloadLink.textContent = "Download";

          fileItem.appendChild(fileName);
          fileItem.appendChild(downloadLink);
          fileListDiv.appendChild(fileItem);
        });
      } else {
        alert("❌ Failed to fetch file list.");
      }
    }

    // Upload file to GitHub
    async function uploadFile(file) {
      const uploadStatus = document.getElementById("uploadStatus");
      uploadStatus.textContent = "Uploading file... Please wait.";

      const reader = new FileReader();
      reader.onload = async () => {
        const base64 = reader.result.split(",")[1];
        const path = encodeURIComponent(file.name);
        const url = `${API_URL}/${path}`;

        // Check if file exists to get sha (for update case)
        let sha = null;
        try {
          const check = await fetch(`${url}?ref=${BRANCH}`, {
            headers: { Authorization: `token ${TOKEN}` }
          });
          if (check.ok) {
            const data = await check.json();
            sha = data.sha;
          }
        } catch (err) {
          console.error("SHA check error:", err);
        }

        const payload = {
          message: sha ? `Update ${file.name}` : `Upload ${file.name}`,
          content: base64,
          branch: BRANCH,
          ...(sha && { sha })
        };

        const res = await fetch(url, {
          method: "PUT",
          headers: {
            Authorization: `token ${TOKEN}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        });

        if (res.ok) {
          uploadStatus.textContent = "File uploaded successfully!";
          fetchFileList(); // Refresh the file list after upload
        } else {
          const error = await res.json();
          uploadStatus.textContent = "Upload failed: " + error.message;
        }
      };

      reader.readAsDataURL(file);
    }

    // Listen for file selection and upload it
    document.getElementById("fileInput").addEventListener("change", (e) => {
      const file = e.target.files[0];
      if (file) {
        uploadFile(file);
      }
    });

    // Fetch and display the file list on initial load
    fetchFileList();
  </script>
</body>
</html>
